/// before edge formation every node is single
/// basicall  i have given two vertices and i should have formed edge between them;
/// union by rank and union by size 

/// initially i have two array which a rank array in which rank is assigned as 0
// in parent arry i assigned parent as the node it'self


/// find the ultimate parent of (u,v)
/// find the rank of ultimate parent of u,ultimate parent of v
// connect smaller rank to larger always because it will not change the rank of the other node
/// moreover to find the parent node travle is smaller 

/// how find whther two nodes lies in same component or not 

/// if  their parent is same then i can say that they are in same component otherwise no


/// to finding the ultimate parent i take O(logN) time 

/// so that's why come the concept of path compression


/// in union by size the array of each node is initalized by 1

/// union by size mean that how many component are there in a node of a subtree




#include<bits/stdc++.h>
using namespace std;

class DisjointSet{
    vector<int>rank,parent,size;
public:
    DisjointSet(int n)
    {
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);

        for(int i = 0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }

    int findUpar(int node)
    {
        if(node == parent[node])
        {
            return node;
        }

        //return findUpar(parent[node]);


        /// the below returning is called path compression
        return parent[node]=findUpar(parent[node]);
    }

    void unionByRank(int u,int v)
    {
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);

        // if they belong into the same componet
        /// i need not ot union them
        if(ulp_u == ulp_v)
        {
            return ;
        }

        if(rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u]=ulp_v;
        
        }
        else if(rank[ulp_v]< rank[ulp_u])
        {
            parent[ulp_v]=ulp_u;
        }
        else{
            parent[ulp_v]=ulp_u;
            /// in this time the height is increase 
            // so the rank is increased

            rank[ulp_u]++;
        }
    }

    void unionBysize(int u,int v)
    {
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);

        // if they belong into the same componet
        /// i need not ot union them
        if(ulp_u == ulp_v)
        {
            return ;
        }

        if(size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u]=ulp_v;

            size[ulp_v]+=size[ulp_u];
        }

        else{
             parent[ulp_v]=ulp_u;

            size[ulp_u]+=size[ulp_v];
        }
    }
};

int main()
{
    DisjointSet ds(7);

    ds.unionBysize(1,2);
    ds.unionBysize(2,3);
    ds.unionBysize(4,5);
    ds.unionBysize(6,7);
    ds.unionBysize(5,6);

    //if 3 and 7 belong to the same component

    if(ds.findUpar(3)==ds.findUpar(7))
    {
        cout<<"Same"<<endl;
    }
    else{
        cout<<"NO"<<endl;
    }

    ds.unionByRank(3,7);

    if(ds.findUpar(3)==ds.findUpar(7))
    {
        cout<<"Same"<<endl;
    }
    else{
        cout<<"NO"<<endl;
    }
}
