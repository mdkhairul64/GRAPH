#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;

vector<int>g[N];

bool vis[N];

int level[N];

 // for maintainng the level which is very important for cp and problem solving

// void dfs(int vertex)
// {
//     cout<<vertex<<endl;
//     vis[vertex]=true;

//     for(int child: g[vertex])
//     {
//         cout<<"par"<<vertex<<", child"<<endl;
//         if(vis[child])
//         {
//             continue;
//         }
//         dfs(child);
//     }

// }

void bfs(int source)
{
    queue<int>q;

    q.push(source);
    vis[source]=1;

    while(!q.empty())
    {
        int cur_v=q.front();
        cout<<cur_v<<" ";
        q.pop();

        for(int child:g[cur_v])
        {
            if(!vis[child])
            {
                q.push(child);

                vis[child]=1;
                level[child]=level[cur_v]+1; 
            }
        }
    }
}

int main()
{
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        int v1,v2;
        cin>>v1>>v2;

        g[v1].push_back(v2);
        g[v2].push_back(v1);
    }
  // dfs(1);
    bfs(1);


    // for(int i=1;i<=n;i++)
    // {
    //     cout<<i<<": "<<level[i]<<endl;;
    // }

    return 0;
}
